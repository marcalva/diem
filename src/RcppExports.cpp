// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// LlkDirMultSparsePar
NumericVector LlkDirMultSparsePar(Eigen::SparseMatrix<double> x, NumericVector sizes, NumericMatrix alpha, int threads, bool display_progress, bool debug);
RcppExport SEXP _diem_LlkDirMultSparsePar(SEXP xSEXP, SEXP sizesSEXP, SEXP alphaSEXP, SEXP threadsSEXP, SEXP display_progressSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sizes(sizesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(LlkDirMultSparsePar(x, sizes, alpha, threads, display_progress, debug));
    return rcpp_result_gen;
END_RCPP
}
// LlkMultSparsePar
NumericVector LlkMultSparsePar(Eigen::SparseMatrix<double> x, NumericVector sizes, NumericMatrix alpha, int threads, bool display_progress, bool debug);
RcppExport SEXP _diem_LlkMultSparsePar(SEXP xSEXP, SEXP sizesSEXP, SEXP alphaSEXP, SEXP threadsSEXP, SEXP display_progressSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sizes(sizesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(LlkMultSparsePar(x, sizes, alpha, threads, display_progress, debug));
    return rcpp_result_gen;
END_RCPP
}
// fast_correct
NumericMatrix fast_correct(Eigen::SparseMatrix<double> x, NumericMatrix means, NumericMatrix props, bool round_count, bool display_progress);
RcppExport SEXP _diem_fast_correct(SEXP xSEXP, SEXP meansSEXP, SEXP propsSEXP, SEXP round_countSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type means(meansSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type props(propsSEXP);
    Rcpp::traits::input_parameter< bool >::type round_count(round_countSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_correct(x, means, props, round_count, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// fit_prop
Eigen::MatrixXd fit_prop(Eigen::SparseMatrix<double> x, Eigen::MatrixXd alpha, Eigen::MatrixXd w, double lrate, double eps, bool accelerate, int threads, bool display_progress);
RcppExport SEXP _diem_fit_prop(SEXP xSEXP, SEXP alphaSEXP, SEXP wSEXP, SEXP lrateSEXP, SEXP epsSEXP, SEXP accelerateSEXP, SEXP threadsSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type lrate(lrateSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type accelerate(accelerateSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_prop(x, alpha, w, lrate, eps, accelerate, threads, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// max_loo
NumericVector max_loo(Eigen::SparseMatrix<double> x, NumericVector sizes, NumericVector weights, NumericVector alpha, double eps, int max_iter, double psc, int threads, bool debug);
RcppExport SEXP _diem_max_loo(SEXP xSEXP, SEXP sizesSEXP, SEXP weightsSEXP, SEXP alphaSEXP, SEXP epsSEXP, SEXP max_iterSEXP, SEXP pscSEXP, SEXP threadsSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sizes(sizesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type psc(pscSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(max_loo(x, sizes, weights, alpha, eps, max_iter, psc, threads, debug));
    return rcpp_result_gen;
END_RCPP
}
// fast_varCPP
NumericVector fast_varCPP(Eigen::SparseMatrix<double> x, NumericVector mu, int threads, bool display_progress);
RcppExport SEXP _diem_fast_varCPP(SEXP xSEXP, SEXP muSEXP, SEXP threadsSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_varCPP(x, mu, threads, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// fast_wvarCPP
NumericVector fast_wvarCPP(Eigen::SparseMatrix<double> x, NumericVector mu, NumericVector weights, int threads, bool display_progress);
RcppExport SEXP _diem_fast_wvarCPP(SEXP xSEXP, SEXP muSEXP, SEXP weightsSEXP, SEXP threadsSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_wvarCPP(x, mu, weights, threads, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// fast_wmeanCPP
NumericVector fast_wmeanCPP(Eigen::SparseMatrix<double> x, NumericVector weights, int threads, bool display_progress);
RcppExport SEXP _diem_fast_wmeanCPP(SEXP xSEXP, SEXP weightsSEXP, SEXP threadsSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_wmeanCPP(x, weights, threads, display_progress));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_diem_LlkDirMultSparsePar", (DL_FUNC) &_diem_LlkDirMultSparsePar, 6},
    {"_diem_LlkMultSparsePar", (DL_FUNC) &_diem_LlkMultSparsePar, 6},
    {"_diem_fast_correct", (DL_FUNC) &_diem_fast_correct, 5},
    {"_diem_fit_prop", (DL_FUNC) &_diem_fit_prop, 8},
    {"_diem_max_loo", (DL_FUNC) &_diem_max_loo, 9},
    {"_diem_fast_varCPP", (DL_FUNC) &_diem_fast_varCPP, 4},
    {"_diem_fast_wvarCPP", (DL_FUNC) &_diem_fast_wvarCPP, 5},
    {"_diem_fast_wmeanCPP", (DL_FUNC) &_diem_fast_wmeanCPP, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_diem(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
